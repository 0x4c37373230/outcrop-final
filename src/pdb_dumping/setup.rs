use {crate::files, std::fs::File, std::io::Write};

/// This function will create the filter settings file if it doesn't exist
pub fn filter_manager() -> bool {
    if !files::path_exists("./dumpFilter.txt") {
        File::create("dumpFilter.txt").unwrap();

        return false;
    }
    true
}

/// This writes the 'header' of the dump output
///
/// # Arguments
///
/// * `pdb_path`: Location of the pdb file to be dumped
/// * `file_type`: Output format type (.hpp for C++ header, .txt for plain text)
///
/// returns: Result<File, String>
///
/// # Examples
///
/// ```
///
/// ```
pub fn dump_init(pdb_path: &str, file_type: &str) -> Result<File, String> {
    if files::path_exists(pdb_path) == false {
        return Err(String::from(&format!("File does not exist: {}", pdb_path)));
    }

    let mut dump_file = match files::create_dump_file(&file_type) {
        Ok(file) => file,
        Err(str) => {
            return Err(String::from(&format!("{}: {}", str, file_type)));
        }
    };

    write!(
        dump_file,
        "/*###############################################################\
        \nBDS function symbols and RVAs\
        \nFile generated by BDumper, a rust bds pdb dumper made by Luke7720\
        \n###############################################################*/\n"
    )
    .expect("ERROR: Could not write to file");

    if file_type == ".hpp" {
        write!(dump_file, "#pragma once\n").expect("ERROR: Could not write to file");
    }

    Ok(dump_file)
}
